package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"regexp"
	"strings"
)

type ReplaceConfig struct {
	Filename    string
	Start       int
	End         int
	CurrentType string
	ReplaceType string
}

func ScanFunction(config ReplaceConfig) {
	lines := ReadFileLines(config.Filename, config.Start, config.End)
	line := ReplaceFuncType(lines, config.ReplaceType)
	WriteResultToFile(line)
}

func ReadFileLines(filename string, start int, end int) []string {
	f, err := os.Open(filename)
	if err != nil {
		log.Println("err", err)
	}
	scanner := bufio.NewScanner(f)
	var lines []string
	lineNumber := 1
	for scanner.Scan() {
		line := scanner.Text()
		if lineNumber >= start && lineNumber <= end {
			fmt.Println("- ", line)
			lines = append(lines, line)
		}
		lineNumber++
	}
	return lines
}

func ReplaceFuncType(lines []string, replaceType string) string {
	file := strings.Join(lines, "\n")
	replacements := map[string]string{
		replaceType:                  "Model",
		strings.ToLower(replaceType): "model",
	}

	for key, value := range replacements {
		r := regexp.MustCompile(`[^ ()";{}\n\t]?` + key + `[^ ()";{}\n\t]?`)
		file = r.ReplaceAllString(file, value)
	}

	fmt.Println("Result is \n", file)

	return file
}

func WriteResultToFile(line string) {
	f, err := os.Create(Conf.Output + "_lazygen.go")
	if err != nil {
		log.Println(err)
	}
	defer f.Close()
	f.Write([]byte("// ATTENTION! THIS FILE WAS GENERATED BY LAZYGEN\n"))
	f.Write([]byte("// DONT TOUCH IT...\n"))
	f.Write([]byte("package " + Conf.Package + "\n"))
	f.Write([]byte("\n"))
	f.Write([]byte(line))
}
